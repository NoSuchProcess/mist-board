#summary This pages explains how to compile the firmware
#sidebar CoreDocTOC

= Prerequisites =

The firmware is written in C. Thus a matching C compiler is needed. The current firmware setup expects a matching version of the gnu compiler collection (GCC) to be installed. 

== Installing GCC on Windows ==

Here is an easy way (but not the most efficient):
  # Instal mingw-get in to your PC using [http://www.mingw.org/wiki/getting_started the installer from this page]
  # Run mingw-get and install the basic packages
  # When done go under the C:\MinGW\msys\1.0\ folder and run _msys.bat_ to check it works

If everything went well you will get a command prompt. Try typing these two commands. If all went well you should see the messages below:
  * *make* (should say "No targets specified...")

Then we must download the source for gcc and dependencies:
  * gmp
  * mcp
  * mpfr 
  * gcc
 
You can use a tool like 7-Zip to extract the folders under the msys /home/(user)/ subfolder so they are availabe in msys.bat prompt under ~.

For each one you will need to go into their forlder and:
  # create an 'arm-none-eabi' subfolder
  # from that folder run a ../configure command with parameters below

All packages should use:
{{{
../configure --target=arm-none-eabi --prefix=/opt/arm-none-eabi
}}}
With some tweaks per package:
  * gmp doesn't recognize target, just use prefix
  * mcp fails saying gmp is a dll, use --enable-static --disable-shared
  * some packages need to be told where to find dependencies (see below)

For mpfr use this config string:
{{{
../configure --target=arm-none-eabi --prefix=/opt/arm-none-eabi --with-gmp=/opt/arm-none-eabi
}}}

For gcc use this configure string:
{{{
../configure --target=arm-none-eabi --prefix=/opt/arm-none-eabi --enable-languages=c --with-newlib
}}}

Some packaged need these flags (configure will stop if not provided):
{{{
--with-gmp=/opt/arm-none-eabi --with-mpfr=/opt/arm-none-eabi --with-mcp=/opt/arm-none-eabi
}}}

After configure runs, you need to do:
{{{
make
make install
}}}

Compile GCC last. After gcc configures and compiles without errors you should be ready to compile the firmware.

Steps to build the firmware:
  # From the msys.bat command prompt open the MiST /firmware/ folder
  # Edit 'Makefile' to remove the Linux path for arm-none-eabi
  # Type "make" and enter

After a few seconds you should see a freshly created *firmware.upg* ready for use.

For (2), if the arm-none-eabi-gcc.exe is in your path it is enough to set:
{{{
BASE ?= arm-none-eabi
}}}



For more details and other examples you can refere to this page: [http://ws0.org/compiling-the-minimig-core-for-the-mist-fpga-board-on-windows/ How to compile the firmware under Windows]



== Installing GCC on Linux ==

Installation is described in [http://retroramblings.net/?p=315 this blog posting]. A [http://mist-board.googlecode.com/svn/trunk/tools/install_arm-none-eabi-gcc.sh shell script] is available to automate the setup.


= Compiling the source code =

The firmware source code is available from the [http://code.google.com/p/mist-board/source/checkout MIST svn repository].

Once the compiler is installed a simple `make` in the firmware subdirectory will build the latest firmware.


= Installing the firmware =

Three files are generated during compilation:

  * *firmware.bin* is the raw binary of the firmware. This can be uploaded to the MIST board using special flashers
  * *firmware.hex* is the same firmware in intel hex format as required by some uploaders
  * *firmware.upg* is the same firmware in a format suited for self-update via the on-screen-display (OSD)

For more details on firmware installation read HowToInstallTheFirmware